// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

namespace DurableTask.SqlServer
{
    using System;
    using System.Diagnostics;
    using System.IO;
    using System.Text;
    using DurableTask.Core;
    using DurableTask.Core.History;
    using Newtonsoft.Json;
    using SemVersion;

    static class DTUtils
    {
        public static readonly SemanticVersion ExtensionVersion = GetExtensionVersion();
        public static readonly string ExtensionVersionString = GetExtensionVersionForLogging(ExtensionVersion);

        // DurableTask.Core has a public static variable that contains the app name
        public static readonly string AppName = DurableTask.Core.Common.Utils.AppName;

        static readonly JsonSerializer DefaultJsonSerializer = JsonSerializer.Create(
            new JsonSerializerSettings
            {
                TypeNameHandling = TypeNameHandling.None,
                NullValueHandling = NullValueHandling.Ignore,
            });

        static SemanticVersion GetExtensionVersion()
        {
            // The product version is auto-generated by the Microsoft.SourceLink.GitHub nuget package.
            // Example: 0.1.0-alpha+46661b102c4ccd123f46782f481c3d4b004e3845
            string productVersion = FileVersionInfo.GetVersionInfo(
                typeof(SqlOrchestrationService).Assembly.Location).ProductVersion;
            return SemanticVersion.Parse(productVersion);
        }

        static string GetExtensionVersionForLogging(SemanticVersion version)
        {
            var builder = new StringBuilder();
            builder
                .Append(version.Major)
                .Append('.')
                .Append(version.Minor)
                .Append('.')
                .Append(version.Patch);

            if (!string.IsNullOrEmpty(version.Prerelease))
            {
                builder.Append('-').Append(version.Prerelease);
            }
#if DEBUG
            // Include the build information only in debug builds
            if (!string.IsNullOrEmpty(version.Build))
            {
                builder.Append('+').Append(version.Build);
            }
#endif
            return builder.ToString();
        }

        public static int GetTaskEventId(HistoryEvent historyEvent)
        {
            if (TryGetTaskScheduledId(historyEvent, out int taskScheduledId))
            {
                return taskScheduledId;
            }

            return historyEvent.EventId;
        }

        static bool TryGetTaskScheduledId(HistoryEvent historyEvent, out int taskScheduledId)
        {
            switch (historyEvent.EventType)
            {
                case EventType.TaskCompleted:
                    taskScheduledId = ((TaskCompletedEvent)historyEvent).TaskScheduledId;
                    return true;
                case EventType.TaskFailed:
                    taskScheduledId = ((TaskFailedEvent)historyEvent).TaskScheduledId;
                    return true;
                case EventType.SubOrchestrationInstanceCompleted:
                    taskScheduledId = ((SubOrchestrationInstanceCompletedEvent)historyEvent).TaskScheduledId;
                    return true;
                case EventType.SubOrchestrationInstanceFailed:
                    taskScheduledId = ((SubOrchestrationInstanceFailedEvent)historyEvent).TaskScheduledId;
                    return true;
                case EventType.TimerFired:
                    taskScheduledId = ((TimerFiredEvent)historyEvent).TimerId;
                    return true;
                case EventType.ExecutionStarted:
                    var parentInstance = ((ExecutionStartedEvent)historyEvent).ParentInstance;
                    if (parentInstance != null)
                    {
                        // taskId that scheduled a sub-orchestration
                        taskScheduledId = parentInstance.TaskScheduleId;
                        return true;
                    }
                    else {
                        taskScheduledId = -1;
                        return false;
                    }
                default:
                    taskScheduledId = -1;
                    return false;
            }
        }

        public static bool TryGetPayloadText(HistoryEvent e, out string? payloadText)
        {
            if (TryGetFailureDetails(e, out FailureDetails? failureDetails) && failureDetails != null)
            {
                payloadText = SerializeToJson(failureDetails);
                return true;
            }

            payloadText = e.EventType switch
            {
                EventType.ContinueAsNew => ((ContinueAsNewEvent)e).Result,
                EventType.EventRaised => ((EventRaisedEvent)e).Input,
                EventType.EventSent => ((EventSentEvent)e).Input,
                EventType.ExecutionCompleted => ((ExecutionCompletedEvent)e).Result,
                EventType.ExecutionFailed => ((ExecutionCompletedEvent)e).Result,
                EventType.ExecutionStarted => ((ExecutionStartedEvent)e).Input,
                EventType.ExecutionTerminated => ((ExecutionTerminatedEvent)e).Input,
                EventType.GenericEvent => ((GenericEvent)e).Data,
                EventType.SubOrchestrationInstanceCompleted => ((SubOrchestrationInstanceCompletedEvent)e).Result,
                EventType.SubOrchestrationInstanceCreated => ((SubOrchestrationInstanceCreatedEvent)e).Input,
                EventType.SubOrchestrationInstanceFailed => ((SubOrchestrationInstanceFailedEvent)e).Details,
                EventType.TaskCompleted => ((TaskCompletedEvent)e).Result,
                EventType.TaskFailed => ((TaskFailedEvent)e).Details,
                EventType.TaskScheduled => ((TaskScheduledEvent)e).Input,
                _ => null,
            };

            return payloadText != null;
        }

        public static bool TryGetFailureDetails(HistoryEvent e, out FailureDetails? failureDetails)
        {
            failureDetails = e.EventType switch
            {
                EventType.ExecutionCompleted => ((ExecutionCompletedEvent)e).FailureDetails,
                EventType.ExecutionFailed => ((ExecutionCompletedEvent)e).FailureDetails,
                EventType.TaskFailed => ((TaskFailedEvent)e).FailureDetails,
                EventType.SubOrchestrationInstanceFailed => ((SubOrchestrationInstanceFailedEvent)e).FailureDetails,
                _ => null,
            };
            return failureDetails != null;
        }

        public static bool HasPayload(HistoryEvent e)
        {
            return
                (TryGetPayloadText(e, out string? text) && !string.IsNullOrEmpty(text)) ||
                (TryGetFailureDetails(e, out FailureDetails? details) && details != null);
        }

        public static string? GetName(HistoryEvent historyEvent)
        {
            return historyEvent.EventType switch
            {
                EventType.EventRaised => ((EventRaisedEvent)historyEvent).Name,
                EventType.EventSent => ((EventSentEvent)historyEvent).Name,
                EventType.ExecutionStarted => ((ExecutionStartedEvent)historyEvent).Name,
                EventType.SubOrchestrationInstanceCreated => ((SubOrchestrationInstanceCreatedEvent)historyEvent).Name,
                EventType.TaskScheduled => ((TaskScheduledEvent)historyEvent).Name,
                _ => null,
            };
        }

        public static OrchestrationStatus? GetRuntimeStatus(HistoryEvent historyEvent)
        {
            switch (historyEvent.EventType)
            {
                case EventType.ExecutionCompleted:
                case EventType.ExecutionFailed:
                    return ((ExecutionCompletedEvent)historyEvent).OrchestrationStatus;
                default:
                    return null;
            }
        }

        public static string? GetParentInstanceId(HistoryEvent historyEvent)
        {
            return historyEvent.EventType switch
            {
                EventType.ExecutionStarted => ((ExecutionStartedEvent)historyEvent).ParentInstance?.OrchestrationInstance.InstanceId,
                _ => null,
            };
        }

        public static string? GetVersion(HistoryEvent historyEvent)
        {
            return historyEvent.EventType switch
            {
                EventType.ExecutionStarted => ((ExecutionStartedEvent)historyEvent).Version,
                EventType.TaskScheduled => ((TaskScheduledEvent)historyEvent).Version,
                _ => null,
            };
        }

        public static bool TryDeserializeFailureDetails(string jsonText, out FailureDetails? failureDetails)
        {
            try
            {
                failureDetails = DeserializeFromJson<FailureDetails>(jsonText);

                // Depending on how the TaskHubWorker is configured, the text might be a FailureDetails JSON object
                // or it might be a serialized Exception. Use the ErrorType field to distinguish. Note that we'll get a
                // false-positive if the exception type has an ErrorType field so this is an imperfect check.
                return failureDetails?.ErrorType != null;
            }
            catch (Exception)
            {
                failureDetails = null;
                return false;
            }
        }

        /// <summary>
        /// Deserialize a JSON-string into an object of type T
        /// This utility is resilient to end-user changes in the DefaultSettings of Newtonsoft.
        /// </summary>
        /// <typeparam name="T">The type to deserialize the JSON string into.</typeparam>
        /// <param name="text">The JSON text.</param>
        /// <returns>The deserialized value.</returns>
        public static T? DeserializeFromJson<T>(string text)
        {
            using var reader = new StringReader(text);
            using var jsonReader = new JsonTextReader(reader);

            return DefaultJsonSerializer.Deserialize<T>(jsonReader);
        }

        /// <summary>
        /// Serializes an object to JSON text.
        /// </summary>
        /// <param name="obj">The object to serialize into JSON.</param>
        /// <returns>The unformatted JSON text.</returns>
        public static string SerializeToJson(object obj)
        {
            using var writer = new StringWriter();
            DefaultJsonSerializer.Serialize(writer, obj);

            writer.Flush();
            return writer.ToString();
        }
    }
}
